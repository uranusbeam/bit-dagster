{"data": {"pipeline": {"__typename": "Pipeline", "solidHandle": {"__typename": "SolidHandle", "solid": {"__typename": "Solid", "definition": {"__typename": "SolidDefinition", "configField": {"__typename": "ConfigTypeField", "configType": {"__typename": "CompositeConfigType", "description": null, "fields": [{"__typename": "ConfigTypeField", "configTypeKey": "String", "description": "Optionally specify the key for the file to be ingested into the keyed store. Defaults to the last path component of the downloaded s3 key.", "isOptional": true, "name": "file_key"}], "isSelector": false, "key": "Shape.6e38f6d149838f935014eb0157bd84420b4c8318", "recursiveConfigTypes": [{"__typename": "RegularConfigType", "description": "", "givenName": "String", "isSelector": false, "key": "String", "typeParamKeys": []}], "typeParamKeys": []}}, "description": "This is a solid which caches a file in s3 into file cache.\n\nThe `file_cache` is a resource type that allows a solid author to save files\nand assign a key to them. The keyed file store can be backed by local file or any\nobject store (currently we support s3). This keyed file store can be configured\nto be at an external location so that is persists in a well known spot between runs.\nIt is designed for the case where there is an expensive download step that should not\noccur unless the downloaded file does not exist. Redownload can be instigated either\nby configuring the source to overwrite files or to just delete the file in the underlying\nstorage manually.\n\nThis works by downloading the file to a temporary file, and then ingesting it into\nthe file cache. In the case of a filesystem-backed file cache, this is a file\ncopy. In the case of a object-store-backed file cache, this is an upload.\n\nIn order to work this must be executed within a mode that provides an `s3`\nand `file_cache` resource.\n    ", "inputDefinitions": [{"__typename": "InputDefinition", "description": null, "name": "s3_coordinate", "type": {"__typename": "RegularRuntimeType", "description": null, "displayName": "S3Coordinate", "name": "S3Coordinate"}}], "metadata": [], "name": "cache_file_from_s3", "outputDefinitions": [{"__typename": "OutputDefinition", "description": null, "name": "result", "type": {"__typename": "RegularRuntimeType", "description": null, "displayName": "FileHandle", "name": "FileHandle"}}], "requiredResources": [{"__typename": "ResourceRequirement", "resourceKey": "file_cache"}, {"__typename": "ResourceRequirement", "resourceKey": "s3"}]}, "inputs": [{"__typename": "Input", "definition": {"__typename": "InputDefinition", "description": null, "name": "s3_coordinate", "type": {"__typename": "RegularRuntimeType", "description": null, "displayName": "S3Coordinate", "name": "S3Coordinate"}}, "dependsOn": []}], "name": "download_q2_sfo_weather", "outputs": [{"__typename": "Output", "definition": {"__typename": "OutputDefinition", "description": null, "name": "result", "type": {"__typename": "RegularRuntimeType", "description": null, "displayName": "FileHandle", "name": "FileHandle"}}, "dependedBy": [{"__typename": "Input", "definition": {"__typename": "InputDefinition", "name": "csv_file_handle"}, "solid": {"__typename": "Solid", "name": "ingest_q2_sfo_weather"}}]}]}}}}}
